services:

    App\ProcessManager\Domain\ServingCustomers\ServingCustomersRepositoryInterface:
        alias: App\ProcessManager\Infrastructure\ServingCustomers\Repository\Redis\ServingCustomersRepository

    App\ProcessManager\Infrastructure\ServingCustomers\Repository\InMemory\ServingCustomersRepository:

    app.repository.redis:
        class: Predis\Client
        arguments:
            $parameters: '%env(REDIS_URL)%'

    App\ProcessManager\Infrastructure\ServingCustomers\Repository\Redis\ServingCustomersRepository:
        arguments:
            $client: '@app.repository.redis'
            $ttl: 3600

    app.simple-serving.message-repository:
        class: EventSauce\MessageRepository\DoctrineMessageRepository\DoctrineMessageRepository
        arguments:
            $connection: '@doctrine.dbal.pizzahouse_db_connection'
            $tableName: 'eventstore.serving_messages'
            $serializer: !service
                class: EventSauce\EventSourcing\Serialization\ConstructingMessageSerializer
            $tableSchema: !service
                class: EventSauce\MessageRepository\TableSchema\DefaultTableSchema
            $eventIdEncoder: !service
                class: EventSauce\IdEncoding\StringIdEncoder
            $aggregateRootIdEncoder: !service
                class: EventSauce\IdEncoding\StringIdEncoder

    app.simple-serving.repository:
        class: EventSauce\EventSourcing\EventSourcedAggregateRootRepository
        arguments:
            $aggregateRootClassName: App\ProcessManager\Domain\SimpleServing\SimpleServing
            $messageRepository: '@app.simple-serving.message-repository'

